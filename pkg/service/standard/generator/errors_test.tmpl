// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"reflect"
	"testing"

	"github.com/lichuan0620/secret-keeper-backend/pkg/standard/common"
)
{{ range .}}
func Test{{.Code}}(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "{{.Code}} standard message test",
			building: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.Code}}({{.TestMessageArgsJoin}}){{- if .TestMessageArgsJoin}}.SetStandardMessageArgs({{.TestMessageArgsJoin}}){{- end}}.SetData(nil).GetHTTPCode(),
					Code:     {{.Code}}({{.TestMessageArgsJoin}}){{- if .TestMessageArgsJoin}}.SetStandardMessageArgs({{.TestMessageArgsJoin}}){{- end}}.SetData(nil).GetCode(),
					Message:  {{.Code}}({{.TestMessageArgsJoin}}){{- if .TestMessageArgsJoin}}.SetStandardMessageArgs({{.TestMessageArgsJoin}}){{- end}}.SetData(nil).GetMessage(),
					Data:     {{.Code}}({{.TestMessageArgsJoin}}){{- if .TestMessageArgsJoin}}.SetStandardMessageArgs({{.TestMessageArgsJoin}}){{- end}}.SetData(nil).GetData(),
				},
			},

			external: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.HTTPCode}},
					Code:     "{{.Code}}",
					Message:  "{{.TestMessage}}",
                    {{- if .MessageParamsJoin }}
					Data: map[string]string{
						{{- range .ParamElements }}
						"{{.MessageParams}}": {{.TestMessageFmtArg}},
						{{- end}}
					},
                    {{- else}}
					Data:     nil,
					{{- end}}
				},
			},
		},
		{
			name: "{{.Code}} message test",
			building: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).GetCode(),
					Message:  {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).GetMessage(),
					Data:     {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.HTTPCode}},
					Code:     "{{.Code}}",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "{{.Code}} sub code test",
			building: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     {{.Code}}({{.TestMessageArgsJoin}}).SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &{{.LCCode}}{
				ErrorBase: common.ErrorBase{
					HTTPCode: {{.HTTPCode}},
					Code:     "{{.Code}}.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}
{{ end }}