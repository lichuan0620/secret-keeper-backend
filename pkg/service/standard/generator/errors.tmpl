// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"fmt"

    "github.com/lichuan0620/secret-keeper-backend/pkg/standard/common"
)
{{ range . }}
type {{.LCCode}} struct {
	common.ErrorBase
}

// {{.Code}} returns a new error explained as follows
/* {{.Comment}} */
{{- if .MessageParamsJoin }}
func {{.Code}}({{.MessageParamsJoin}} string) *{{.LCCode}} {
	return &{{.LCCode}}{
		ErrorBase: common.ErrorBase{
			HTTPCode: {{.HTTPCode}},
			Code:     "{{.Code}}",
			Message:  fmt.Sprintf("{{.FmtMessage}}", {{.MessageFmtJoin}}),
			DataPreset: map[string]string{
            {{- range .ParamElements }}
				"{{.MessageParams}}": {{.MessageParams}},
            {{- end}}
			},
		},
	}
}

func (e *{{.LCCode}}) SetStandardMessageArgs({{.MessageParamsJoin}} string) *{{.LCCode}} {
	e.ErrorBase.Message = fmt.Sprintf("{{.FmtMessage}}", {{.MessageFmtJoin}})
	e.ErrorBase.DataPreset = map[string]string{
	{{- range .ParamElements }}
		"{{.MessageParams}}": {{.MessageParams}},
	{{- end}}
	}
	return e
}
{{ else}}
func {{.Code}}() *{{.LCCode}} {
	return &{{.LCCode}}{
		ErrorBase: common.ErrorBase{
			HTTPCode: {{.HTTPCode}},
			Code:     "{{.Code}}",
			Message:  "{{.Message}}",
		},
	}
}
{{ end}}
func (e *{{.LCCode}}) AppendSubCode(code string) *{{.LCCode}} {
	e.Code = e.Code + "." + code
	return e
}

func (e *{{.LCCode}}) SetMessage(message string) *{{.LCCode}} {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *{{.LCCode}}) SetData(data map[string]string) *{{.LCCode}} {
	e.ErrorBase.Data = data
	return e
}
{{ end }}