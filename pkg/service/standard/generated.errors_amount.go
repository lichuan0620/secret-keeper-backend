// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"fmt"

	"github.com/lichuan0620/secret-keeper-backend/pkg/service/standard/common"
)

type exceededQuota struct {
	common.ErrorBase
}

// ExceededQuota returns a new error explained as follows
/* 主要是创建类的接口用户级别的额度超过限制。 */
func ExceededQuota(QuotaName string) *exceededQuota {
	return &exceededQuota{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "ExceededQuota",
			Message:  fmt.Sprintf("The specified quota %s is exceeded.", QuotaName),
			DataPreset: map[string]string{
				"QuotaName": QuotaName,
			},
		},
	}
}

func (e *exceededQuota) SetStandardMessageArgs(QuotaName string) *exceededQuota {
	e.ErrorBase.Message = fmt.Sprintf("The specified quota %s is exceeded.", QuotaName)
	e.ErrorBase.DataPreset = map[string]string{
		"QuotaName": QuotaName,
	}
	return e
}

func (e *exceededQuota) AppendSubCode(code string) *exceededQuota {
	e.Code = e.Code + "." + code
	return e
}

func (e *exceededQuota) SetMessage(message string) *exceededQuota {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *exceededQuota) SetData(data map[string]string) *exceededQuota {
	e.ErrorBase.Data = data
	return e
}

type exceededLimit struct {
	common.ErrorBase
}

// ExceededLimit returns a new error explained as follows
/* 主要是创建类的接口产品形态级别的超越了限制，比如制定规格的VCI最多的CNI到达上限，挂载的存储设备超过了产品规定的上限。 */
func ExceededLimit(LimitName string) *exceededLimit {
	return &exceededLimit{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "ExceededLimit",
			Message:  fmt.Sprintf("The specified product limit %s is exceeded.", LimitName),
			DataPreset: map[string]string{
				"LimitName": LimitName,
			},
		},
	}
}

func (e *exceededLimit) SetStandardMessageArgs(LimitName string) *exceededLimit {
	e.ErrorBase.Message = fmt.Sprintf("The specified product limit %s is exceeded.", LimitName)
	e.ErrorBase.DataPreset = map[string]string{
		"LimitName": LimitName,
	}
	return e
}

func (e *exceededLimit) AppendSubCode(code string) *exceededLimit {
	e.Code = e.Code + "." + code
	return e
}

func (e *exceededLimit) SetMessage(message string) *exceededLimit {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *exceededLimit) SetData(data map[string]string) *exceededLimit {
	e.ErrorBase.Data = data
	return e
}

type insufficientBalance struct {
	common.ErrorBase
}

// InsufficientBalance returns a new error explained as follows
/* 账户余额不足（导致无法创建新资源或者完成变配）。 */
func InsufficientBalance() *insufficientBalance {
	return &insufficientBalance{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "InsufficientBalance",
			Message:  "Your account does not have enough balance.",
		},
	}
}

func (e *insufficientBalance) AppendSubCode(code string) *insufficientBalance {
	e.Code = e.Code + "." + code
	return e
}

func (e *insufficientBalance) SetMessage(message string) *insufficientBalance {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *insufficientBalance) SetData(data map[string]string) *insufficientBalance {
	e.ErrorBase.Data = data
	return e
}

type accountUnbalanced struct {
	common.ErrorBase
}

// AccountUnbalanced returns a new error explained as follows
/* 账户欠费（导致无法创建新资源或者完成变配）。 */
func AccountUnbalanced() *accountUnbalanced {
	return &accountUnbalanced{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "AccountUnbalanced",
			Message:  "Your account has ran out of balance.",
		},
	}
}

func (e *accountUnbalanced) AppendSubCode(code string) *accountUnbalanced {
	e.Code = e.Code + "." + code
	return e
}

func (e *accountUnbalanced) SetMessage(message string) *accountUnbalanced {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *accountUnbalanced) SetData(data map[string]string) *accountUnbalanced {
	e.ErrorBase.Data = data
	return e
}

type accountCreditUnbalanced struct {
	common.ErrorBase
}

// AccountCreditUnbalanced returns a new error explained as follows
/* 账户信用额度不足（导致无法创建新资源或者完成变配）。 */
func AccountCreditUnbalanced() *accountCreditUnbalanced {
	return &accountCreditUnbalanced{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "AccountCreditUnbalanced",
			Message:  "Your account has ran out of credit.",
		},
	}
}

func (e *accountCreditUnbalanced) AppendSubCode(code string) *accountCreditUnbalanced {
	e.Code = e.Code + "." + code
	return e
}

func (e *accountCreditUnbalanced) SetMessage(message string) *accountCreditUnbalanced {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *accountCreditUnbalanced) SetData(data map[string]string) *accountCreditUnbalanced {
	e.ErrorBase.Data = data
	return e
}
