// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"reflect"
	"testing"

	"github.com/lichuan0620/secret-keeper-backend/pkg/service/standard/common"
)

func TestExceededQuota(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ExceededQuota standard message test",
			building: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededQuota("test_QuotaName").SetStandardMessageArgs("test_QuotaName").SetData(nil).GetHTTPCode(),
					Code:     ExceededQuota("test_QuotaName").SetStandardMessageArgs("test_QuotaName").SetData(nil).GetCode(),
					Message:  ExceededQuota("test_QuotaName").SetStandardMessageArgs("test_QuotaName").SetData(nil).GetMessage(),
					Data:     ExceededQuota("test_QuotaName").SetStandardMessageArgs("test_QuotaName").SetData(nil).GetData(),
				},
			},

			external: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededQuota",
					Message:  "The specified quota test_QuotaName is exceeded.",
					Data: map[string]string{
						"QuotaName": "test_QuotaName",
					},
				},
			},
		},
		{
			name: "ExceededQuota message test",
			building: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededQuota",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ExceededQuota sub code test",
			building: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ExceededQuota("test_QuotaName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &exceededQuota{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededQuota.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestExceededLimit(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ExceededLimit standard message test",
			building: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededLimit("test_LimitName").SetStandardMessageArgs("test_LimitName").SetData(nil).GetHTTPCode(),
					Code:     ExceededLimit("test_LimitName").SetStandardMessageArgs("test_LimitName").SetData(nil).GetCode(),
					Message:  ExceededLimit("test_LimitName").SetStandardMessageArgs("test_LimitName").SetData(nil).GetMessage(),
					Data:     ExceededLimit("test_LimitName").SetStandardMessageArgs("test_LimitName").SetData(nil).GetData(),
				},
			},

			external: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededLimit",
					Message:  "The specified product limit test_LimitName is exceeded.",
					Data: map[string]string{
						"LimitName": "test_LimitName",
					},
				},
			},
		},
		{
			name: "ExceededLimit message test",
			building: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededLimit",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ExceededLimit sub code test",
			building: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ExceededLimit("test_LimitName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &exceededLimit{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ExceededLimit.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInsufficientBalance(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InsufficientBalance standard message test",
			building: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: InsufficientBalance().SetData(nil).GetHTTPCode(),
					Code:     InsufficientBalance().SetData(nil).GetCode(),
					Message:  InsufficientBalance().SetData(nil).GetMessage(),
					Data:     InsufficientBalance().SetData(nil).GetData(),
				},
			},

			external: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "InsufficientBalance",
					Message:  "Your account does not have enough balance.",
					Data:     nil,
				},
			},
		},
		{
			name: "InsufficientBalance message test",
			building: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: InsufficientBalance().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InsufficientBalance().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InsufficientBalance().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InsufficientBalance().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "InsufficientBalance",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InsufficientBalance sub code test",
			building: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: InsufficientBalance().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InsufficientBalance().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InsufficientBalance().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InsufficientBalance().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &insufficientBalance{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "InsufficientBalance.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestAccountUnbalanced(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "AccountUnbalanced standard message test",
			building: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountUnbalanced().SetData(nil).GetHTTPCode(),
					Code:     AccountUnbalanced().SetData(nil).GetCode(),
					Message:  AccountUnbalanced().SetData(nil).GetMessage(),
					Data:     AccountUnbalanced().SetData(nil).GetData(),
				},
			},

			external: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountUnbalanced",
					Message:  "Your account has ran out of balance.",
					Data:     nil,
				},
			},
		},
		{
			name: "AccountUnbalanced message test",
			building: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountUnbalanced().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     AccountUnbalanced().SetMessage("test message").SetData(nil).GetCode(),
					Message:  AccountUnbalanced().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     AccountUnbalanced().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountUnbalanced",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "AccountUnbalanced sub code test",
			building: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     AccountUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  AccountUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     AccountUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &accountUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountUnbalanced.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestAccountCreditUnbalanced(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "AccountCreditUnbalanced standard message test",
			building: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountCreditUnbalanced().SetData(nil).GetHTTPCode(),
					Code:     AccountCreditUnbalanced().SetData(nil).GetCode(),
					Message:  AccountCreditUnbalanced().SetData(nil).GetMessage(),
					Data:     AccountCreditUnbalanced().SetData(nil).GetData(),
				},
			},

			external: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountCreditUnbalanced",
					Message:  "Your account has ran out of credit.",
					Data:     nil,
				},
			},
		},
		{
			name: "AccountCreditUnbalanced message test",
			building: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountCreditUnbalanced().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     AccountCreditUnbalanced().SetMessage("test message").SetData(nil).GetCode(),
					Message:  AccountCreditUnbalanced().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     AccountCreditUnbalanced().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountCreditUnbalanced",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "AccountCreditUnbalanced sub code test",
			building: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: AccountCreditUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     AccountCreditUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  AccountCreditUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     AccountCreditUnbalanced().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &accountCreditUnbalanced{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "AccountCreditUnbalanced.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestMissingParameter(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "MissingParameter standard message test",
			building: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MissingParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetHTTPCode(),
					Code:     MissingParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetCode(),
					Message:  MissingParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetMessage(),
					Data:     MissingParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetData(),
				},
			},

			external: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MissingParameter",
					Message:  "The request is missing test_ParamName parameter.",
					Data: map[string]string{
						"ParamName": "test_ParamName",
					},
				},
			},
		},
		{
			name: "MissingParameter message test",
			building: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MissingParameter",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "MissingParameter sub code test",
			building: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     MissingParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &missingParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MissingParameter.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInvalidParameter(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InvalidParameter standard message test",
			building: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetHTTPCode(),
					Code:     InvalidParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetCode(),
					Message:  InvalidParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetMessage(),
					Data:     InvalidParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetData(),
				},
			},

			external: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidParameter",
					Message:  "The specified parameter test_ParamName is not valid.",
					Data: map[string]string{
						"ParamName": "test_ParamName",
					},
				},
			},
		},
		{
			name: "InvalidParameter message test",
			building: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidParameter",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidParameter sub code test",
			building: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InvalidParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &invalidParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidParameter.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestMalformedParameter(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "MalformedParameter standard message test",
			building: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MalformedParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetHTTPCode(),
					Code:     MalformedParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetCode(),
					Message:  MalformedParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetMessage(),
					Data:     MalformedParameter("test_ParamName").SetStandardMessageArgs("test_ParamName").SetData(nil).GetData(),
				},
			},

			external: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MalformedParameter",
					Message:  " The specified parameter test_ParamName is malformed.",
					Data: map[string]string{
						"ParamName": "test_ParamName",
					},
				},
			},
		},
		{
			name: "MalformedParameter message test",
			building: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MalformedParameter",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "MalformedParameter sub code test",
			building: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     MalformedParameter("test_ParamName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &malformedParameter{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "MalformedParameter.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInvalidActionOrVersion(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InvalidActionOrVersion standard message test",
			building: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidActionOrVersion("test_Action", "test_Version").SetStandardMessageArgs("test_Action", "test_Version").SetData(nil).GetHTTPCode(),
					Code:     InvalidActionOrVersion("test_Action", "test_Version").SetStandardMessageArgs("test_Action", "test_Version").SetData(nil).GetCode(),
					Message:  InvalidActionOrVersion("test_Action", "test_Version").SetStandardMessageArgs("test_Action", "test_Version").SetData(nil).GetMessage(),
					Data:     InvalidActionOrVersion("test_Action", "test_Version").SetStandardMessageArgs("test_Action", "test_Version").SetData(nil).GetData(),
				},
			},

			external: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "InvalidActionOrVersion",
					Message:  "Could not find operation test_Action for version test_Version.",
					Data: map[string]string{
						"Action":  "test_Action",
						"Version": "test_Version",
					},
				},
			},
		},
		{
			name: "InvalidActionOrVersion message test",
			building: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).GetCode(),
					Message:  InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "InvalidActionOrVersion",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidActionOrVersion sub code test",
			building: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InvalidActionOrVersion("test_Action", "test_Version").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &invalidActionOrVersion{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "InvalidActionOrVersion.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestMethodNotAllowed(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "MethodNotAllowed standard message test",
			building: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: MethodNotAllowed().SetData(nil).GetHTTPCode(),
					Code:     MethodNotAllowed().SetData(nil).GetCode(),
					Message:  MethodNotAllowed().SetData(nil).GetMessage(),
					Data:     MethodNotAllowed().SetData(nil).GetData(),
				},
			},

			external: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 405,
					Code:     "MethodNotAllowed",
					Message:  "HTTP method not allowed",
					Data:     nil,
				},
			},
		},
		{
			name: "MethodNotAllowed message test",
			building: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: MethodNotAllowed().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     MethodNotAllowed().SetMessage("test message").SetData(nil).GetCode(),
					Message:  MethodNotAllowed().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     MethodNotAllowed().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 405,
					Code:     "MethodNotAllowed",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "MethodNotAllowed sub code test",
			building: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: MethodNotAllowed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     MethodNotAllowed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  MethodNotAllowed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     MethodNotAllowed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &methodNotAllowed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 405,
					Code:     "MethodNotAllowed.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInvalidIdempotency(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InvalidIdempotency standard message test",
			building: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidIdempotency().SetData(nil).GetHTTPCode(),
					Code:     InvalidIdempotency().SetData(nil).GetCode(),
					Message:  InvalidIdempotency().SetData(nil).GetMessage(),
					Data:     InvalidIdempotency().SetData(nil).GetData(),
				},
			},

			external: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "InvalidIdempotency",
					Message:  "The specified request includes invalid idempotency.",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidIdempotency message test",
			building: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidIdempotency().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InvalidIdempotency().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InvalidIdempotency().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InvalidIdempotency().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "InvalidIdempotency",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidIdempotency sub code test",
			building: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidIdempotency().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InvalidIdempotency().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InvalidIdempotency().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InvalidIdempotency().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &invalidIdempotency{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "InvalidIdempotency.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestUnsupportedContentType(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "UnsupportedContentType standard message test",
			building: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: UnsupportedContentType().SetData(nil).GetHTTPCode(),
					Code:     UnsupportedContentType().SetData(nil).GetCode(),
					Message:  UnsupportedContentType().SetData(nil).GetMessage(),
					Data:     UnsupportedContentType().SetData(nil).GetData(),
				},
			},

			external: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 415,
					Code:     "UnsupportedContentType",
					Message:  "The specified HTTP content type is not supported",
					Data:     nil,
				},
			},
		},
		{
			name: "UnsupportedContentType message test",
			building: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: UnsupportedContentType().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     UnsupportedContentType().SetMessage("test message").SetData(nil).GetCode(),
					Message:  UnsupportedContentType().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     UnsupportedContentType().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 415,
					Code:     "UnsupportedContentType",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "UnsupportedContentType sub code test",
			building: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: UnsupportedContentType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     UnsupportedContentType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  UnsupportedContentType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     UnsupportedContentType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &unsupportedContentType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 415,
					Code:     "UnsupportedContentType.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInvalidAuthorization(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InvalidAuthorization standard message test",
			building: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidAuthorization().SetData(nil).GetHTTPCode(),
					Code:     InvalidAuthorization().SetData(nil).GetCode(),
					Message:  InvalidAuthorization().SetData(nil).GetMessage(),
					Data:     InvalidAuthorization().SetData(nil).GetData(),
				},
			},

			external: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: 401,
					Code:     "InvalidAuthorization",
					Message:  "Invalid authentication credentials for the requested resource.",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidAuthorization message test",
			building: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidAuthorization().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InvalidAuthorization().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InvalidAuthorization().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InvalidAuthorization().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: 401,
					Code:     "InvalidAuthorization",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidAuthorization sub code test",
			building: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidAuthorization().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InvalidAuthorization().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InvalidAuthorization().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InvalidAuthorization().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &invalidAuthorization{
				ErrorBase: common.ErrorBase{
					HTTPCode: 401,
					Code:     "InvalidAuthorization.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestForbiddenOperation(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ForbiddenOperation standard message test",
			building: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: ForbiddenOperation("test_Action").SetStandardMessageArgs("test_Action").SetData(nil).GetHTTPCode(),
					Code:     ForbiddenOperation("test_Action").SetStandardMessageArgs("test_Action").SetData(nil).GetCode(),
					Message:  ForbiddenOperation("test_Action").SetStandardMessageArgs("test_Action").SetData(nil).GetMessage(),
					Data:     ForbiddenOperation("test_Action").SetStandardMessageArgs("test_Action").SetData(nil).GetData(),
				},
			},

			external: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ForbiddenOperation",
					Message:  "You have no permission to perform operation: test_Action",
					Data: map[string]string{
						"Action": "test_Action",
					},
				},
			},
		},
		{
			name: "ForbiddenOperation message test",
			building: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).GetCode(),
					Message:  ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ForbiddenOperation",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ForbiddenOperation sub code test",
			building: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ForbiddenOperation("test_Action").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &forbiddenOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ForbiddenOperation.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestProductUnsubscribed(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ProductUnsubscribed standard message test",
			building: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: ProductUnsubscribed().SetData(nil).GetHTTPCode(),
					Code:     ProductUnsubscribed().SetData(nil).GetCode(),
					Message:  ProductUnsubscribed().SetData(nil).GetMessage(),
					Data:     ProductUnsubscribed().SetData(nil).GetData(),
				},
			},

			external: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ProductUnsubscribed",
					Message:  "No access to the product, please go to the console to activate and try again",
					Data:     nil,
				},
			},
		},
		{
			name: "ProductUnsubscribed message test",
			building: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: ProductUnsubscribed().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ProductUnsubscribed().SetMessage("test message").SetData(nil).GetCode(),
					Message:  ProductUnsubscribed().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ProductUnsubscribed().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ProductUnsubscribed",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ProductUnsubscribed sub code test",
			building: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: ProductUnsubscribed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ProductUnsubscribed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ProductUnsubscribed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ProductUnsubscribed().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &productUnsubscribed{
				ErrorBase: common.ErrorBase{
					HTTPCode: 403,
					Code:     "ProductUnsubscribed.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestDryRunOperation(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "DryRunOperation standard message test",
			building: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: DryRunOperation().SetData(nil).GetHTTPCode(),
					Code:     DryRunOperation().SetData(nil).GetCode(),
					Message:  DryRunOperation().SetData(nil).GetMessage(),
					Data:     DryRunOperation().SetData(nil).GetData(),
				},
			},

			external: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "DryRunOperation",
					Message:  "Request validation has been passed with DryRun flag set.",
					Data:     nil,
				},
			},
		},
		{
			name: "DryRunOperation message test",
			building: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: DryRunOperation().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     DryRunOperation().SetMessage("test message").SetData(nil).GetCode(),
					Message:  DryRunOperation().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     DryRunOperation().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "DryRunOperation",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "DryRunOperation sub code test",
			building: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: DryRunOperation().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     DryRunOperation().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  DryRunOperation().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     DryRunOperation().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &dryRunOperation{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "DryRunOperation.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInternalServiceError(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InternalServiceError standard message test",
			building: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceError().SetData(nil).GetHTTPCode(),
					Code:     InternalServiceError().SetData(nil).GetCode(),
					Message:  InternalServiceError().SetData(nil).GetMessage(),
					Data:     InternalServiceError().SetData(nil).GetData(),
				},
			},

			external: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: 500,
					Code:     "InternalServiceError",
					Message:  "Service has some internal Error. Pls Contact With Admin.",
					Data:     nil,
				},
			},
		},
		{
			name: "InternalServiceError message test",
			building: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceError().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InternalServiceError().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InternalServiceError().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InternalServiceError().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: 500,
					Code:     "InternalServiceError",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InternalServiceError sub code test",
			building: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceError().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InternalServiceError().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InternalServiceError().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InternalServiceError().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &internalServiceError{
				ErrorBase: common.ErrorBase{
					HTTPCode: 500,
					Code:     "InternalServiceError.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInvalidChargeType(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InvalidChargeType standard message test",
			building: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidChargeType().SetData(nil).GetHTTPCode(),
					Code:     InvalidChargeType().SetData(nil).GetCode(),
					Message:  InvalidChargeType().SetData(nil).GetMessage(),
					Data:     InvalidChargeType().SetData(nil).GetData(),
				},
			},

			external: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidChargeType",
					Message:  "ChargeType is not valid.",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidChargeType message test",
			building: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidChargeType().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InvalidChargeType().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InvalidChargeType().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InvalidChargeType().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidChargeType",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InvalidChargeType sub code test",
			building: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: InvalidChargeType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InvalidChargeType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InvalidChargeType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InvalidChargeType().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &invalidChargeType{
				ErrorBase: common.ErrorBase{
					HTTPCode: 400,
					Code:     "InvalidChargeType.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestResourceNotFound(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ResourceNotFound standard message test",
			building: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: ResourceNotFound("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetHTTPCode(),
					Code:     ResourceNotFound("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetCode(),
					Message:  ResourceNotFound("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetMessage(),
					Data:     ResourceNotFound("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetData(),
				},
			},

			external: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "ResourceNotFound",
					Message:  "The specified resource test_ResourceName cannot be found.",
					Data: map[string]string{
						"ResourceName": "test_ResourceName",
					},
				},
			},
		},
		{
			name: "ResourceNotFound message test",
			building: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "ResourceNotFound",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ResourceNotFound sub code test",
			building: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ResourceNotFound("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &resourceNotFound{
				ErrorBase: common.ErrorBase{
					HTTPCode: 404,
					Code:     "ResourceNotFound.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestDuplicatedResource(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "DuplicatedResource standard message test",
			building: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: DuplicatedResource("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetHTTPCode(),
					Code:     DuplicatedResource("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetCode(),
					Message:  DuplicatedResource("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetMessage(),
					Data:     DuplicatedResource("test_ResourceName").SetStandardMessageArgs("test_ResourceName").SetData(nil).GetData(),
				},
			},

			external: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "DuplicatedResource",
					Message:  "Resource test_ResourceName already exists.",
					Data: map[string]string{
						"ResourceName": "test_ResourceName",
					},
				},
			},
		},
		{
			name: "DuplicatedResource message test",
			building: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).GetCode(),
					Message:  DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).GetMessage(),
					Data:     DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "DuplicatedResource",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "DuplicatedResource sub code test",
			building: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     DuplicatedResource("test_ResourceName").SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &duplicatedResource{
				ErrorBase: common.ErrorBase{
					HTTPCode: 409,
					Code:     "DuplicatedResource.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestServiceFlowLimitExceeded(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "ServiceFlowLimitExceeded standard message test",
			building: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: ServiceFlowLimitExceeded().SetData(nil).GetHTTPCode(),
					Code:     ServiceFlowLimitExceeded().SetData(nil).GetCode(),
					Message:  ServiceFlowLimitExceeded().SetData(nil).GetMessage(),
					Data:     ServiceFlowLimitExceeded().SetData(nil).GetData(),
				},
			},

			external: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: 429,
					Code:     "ServiceFlowLimitExceeded",
					Message:  "Request was rejected because the request speed of this openAPI is beyond the current flow control limit.",
					Data:     nil,
				},
			},
		},
		{
			name: "ServiceFlowLimitExceeded message test",
			building: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).GetCode(),
					Message:  ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: 429,
					Code:     "ServiceFlowLimitExceeded",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "ServiceFlowLimitExceeded sub code test",
			building: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     ServiceFlowLimitExceeded().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &serviceFlowLimitExceeded{
				ErrorBase: common.ErrorBase{
					HTTPCode: 429,
					Code:     "ServiceFlowLimitExceeded.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}

func TestInternalServiceTimeout(t *testing.T) {
	tests := []struct {
		name     string
		building Error
		external Error
	}{
		{
			name: "InternalServiceTimeout standard message test",
			building: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceTimeout().SetData(nil).GetHTTPCode(),
					Code:     InternalServiceTimeout().SetData(nil).GetCode(),
					Message:  InternalServiceTimeout().SetData(nil).GetMessage(),
					Data:     InternalServiceTimeout().SetData(nil).GetData(),
				},
			},

			external: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: 504,
					Code:     "InternalServiceTimeout",
					Message:  "Internal Service is timeout. Pls Contact With Admin.",
					Data:     nil,
				},
			},
		},
		{
			name: "InternalServiceTimeout message test",
			building: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceTimeout().SetMessage("test message").SetData(nil).GetHTTPCode(),
					Code:     InternalServiceTimeout().SetMessage("test message").SetData(nil).GetCode(),
					Message:  InternalServiceTimeout().SetMessage("test message").SetData(nil).GetMessage(),
					Data:     InternalServiceTimeout().SetMessage("test message").SetData(nil).GetData(),
				},
			},

			external: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: 504,
					Code:     "InternalServiceTimeout",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
		{
			name: "InternalServiceTimeout sub code test",
			building: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: InternalServiceTimeout().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetHTTPCode(),
					Code:     InternalServiceTimeout().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetCode(),
					Message:  InternalServiceTimeout().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetMessage(),
					Data:     InternalServiceTimeout().SetMessage("test message").SetData(nil).AppendSubCode("TestCode").GetData(),
				},
			},

			external: &internalServiceTimeout{
				ErrorBase: common.ErrorBase{
					HTTPCode: 504,
					Code:     "InternalServiceTimeout.TestCode",
					Message:  "test message",
					Data:     nil,
				},
			},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if !reflect.DeepEqual(tt.building, tt.external) {
				t.Errorf("httpCode not expected. building: (%+v) expected: (%+v)", tt.building, tt.external)
			}
		})
	}
}
