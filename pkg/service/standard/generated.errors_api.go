// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"fmt"

	"github.com/lichuan0620/secret-keeper-backend/pkg/service/standard/common"
)

type missingParameter struct {
	common.ErrorBase
}

// MissingParameter returns a new error explained as follows
/* 必填参数缺失 */
func MissingParameter(ParamName string) *missingParameter {
	return &missingParameter{
		ErrorBase: common.ErrorBase{
			HTTPCode: 400,
			Code:     "MissingParameter",
			Message:  fmt.Sprintf("The request is missing %s parameter.", ParamName),
			DataPreset: map[string]string{
				"ParamName": ParamName,
			},
		},
	}
}

func (e *missingParameter) SetStandardMessageArgs(ParamName string) *missingParameter {
	e.ErrorBase.Message = fmt.Sprintf("The request is missing %s parameter.", ParamName)
	e.ErrorBase.DataPreset = map[string]string{
		"ParamName": ParamName,
	}
	return e
}

func (e *missingParameter) AppendSubCode(code string) *missingParameter {
	e.Code = e.Code + "." + code
	return e
}

func (e *missingParameter) SetMessage(message string) *missingParameter {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *missingParameter) SetData(data map[string]string) *missingParameter {
	e.ErrorBase.Data = data
	return e
}

type invalidParameter struct {
	common.ErrorBase
}

// InvalidParameter returns a new error explained as follows
/* 指定的参数值不合法。比如int上下限值超阈值；非法枚举值；boolean类型不是true/false。 */
func InvalidParameter(ParamName string) *invalidParameter {
	return &invalidParameter{
		ErrorBase: common.ErrorBase{
			HTTPCode: 400,
			Code:     "InvalidParameter",
			Message:  fmt.Sprintf("The specified parameter %s is not valid.", ParamName),
			DataPreset: map[string]string{
				"ParamName": ParamName,
			},
		},
	}
}

func (e *invalidParameter) SetStandardMessageArgs(ParamName string) *invalidParameter {
	e.ErrorBase.Message = fmt.Sprintf("The specified parameter %s is not valid.", ParamName)
	e.ErrorBase.DataPreset = map[string]string{
		"ParamName": ParamName,
	}
	return e
}

func (e *invalidParameter) AppendSubCode(code string) *invalidParameter {
	e.Code = e.Code + "." + code
	return e
}

func (e *invalidParameter) SetMessage(message string) *invalidParameter {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *invalidParameter) SetData(data map[string]string) *invalidParameter {
	e.ErrorBase.Data = data
	return e
}

type malformedParameter struct {
	common.ErrorBase
}

// MalformedParameter returns a new error explained as follows
/* 指定的参数值格式不合法。长度为xx-yy个字符，不能以http://和https://开头。（本错误代码主要for字符串类的错误）。 */
func MalformedParameter(ParamName string) *malformedParameter {
	return &malformedParameter{
		ErrorBase: common.ErrorBase{
			HTTPCode: 400,
			Code:     "MalformedParameter",
			Message:  fmt.Sprintf(" The specified parameter %s is malformed.", ParamName),
			DataPreset: map[string]string{
				"ParamName": ParamName,
			},
		},
	}
}

func (e *malformedParameter) SetStandardMessageArgs(ParamName string) *malformedParameter {
	e.ErrorBase.Message = fmt.Sprintf(" The specified parameter %s is malformed.", ParamName)
	e.ErrorBase.DataPreset = map[string]string{
		"ParamName": ParamName,
	}
	return e
}

func (e *malformedParameter) AppendSubCode(code string) *malformedParameter {
	e.Code = e.Code + "." + code
	return e
}

func (e *malformedParameter) SetMessage(message string) *malformedParameter {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *malformedParameter) SetData(data map[string]string) *malformedParameter {
	e.ErrorBase.Data = data
	return e
}

type invalidActionOrVersion struct {
	common.ErrorBase
}

// InvalidActionOrVersion returns a new error explained as follows
/* 请求接口不存在 */
func InvalidActionOrVersion(Action, Version string) *invalidActionOrVersion {
	return &invalidActionOrVersion{
		ErrorBase: common.ErrorBase{
			HTTPCode: 404,
			Code:     "InvalidActionOrVersion",
			Message:  fmt.Sprintf("Could not find operation %s for version %s.", Action, Version),
			DataPreset: map[string]string{
				"Action":  Action,
				"Version": Version,
			},
		},
	}
}

func (e *invalidActionOrVersion) SetStandardMessageArgs(Action, Version string) *invalidActionOrVersion {
	e.ErrorBase.Message = fmt.Sprintf("Could not find operation %s for version %s.", Action, Version)
	e.ErrorBase.DataPreset = map[string]string{
		"Action":  Action,
		"Version": Version,
	}
	return e
}

func (e *invalidActionOrVersion) AppendSubCode(code string) *invalidActionOrVersion {
	e.Code = e.Code + "." + code
	return e
}

func (e *invalidActionOrVersion) SetMessage(message string) *invalidActionOrVersion {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *invalidActionOrVersion) SetData(data map[string]string) *invalidActionOrVersion {
	e.ErrorBase.Data = data
	return e
}

type methodNotAllowed struct {
	common.ErrorBase
}

// MethodNotAllowed returns a new error explained as follows
/* Http method不合法 */
func MethodNotAllowed() *methodNotAllowed {
	return &methodNotAllowed{
		ErrorBase: common.ErrorBase{
			HTTPCode: 405,
			Code:     "MethodNotAllowed",
			Message:  "HTTP method not allowed",
		},
	}
}

func (e *methodNotAllowed) AppendSubCode(code string) *methodNotAllowed {
	e.Code = e.Code + "." + code
	return e
}

func (e *methodNotAllowed) SetMessage(message string) *methodNotAllowed {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *methodNotAllowed) SetData(data map[string]string) *methodNotAllowed {
	e.ErrorBase.Data = data
	return e
}

type invalidIdempotency struct {
	common.ErrorBase
}

// InvalidIdempotency returns a new error explained as follows
/* 请求包括不一致的幂等内容。 */
func InvalidIdempotency() *invalidIdempotency {
	return &invalidIdempotency{
		ErrorBase: common.ErrorBase{
			HTTPCode: 409,
			Code:     "InvalidIdempotency",
			Message:  "The specified request includes invalid idempotency.",
		},
	}
}

func (e *invalidIdempotency) AppendSubCode(code string) *invalidIdempotency {
	e.Code = e.Code + "." + code
	return e
}

func (e *invalidIdempotency) SetMessage(message string) *invalidIdempotency {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *invalidIdempotency) SetData(data map[string]string) *invalidIdempotency {
	e.ErrorBase.Data = data
	return e
}

type unsupportedContentType struct {
	common.ErrorBase
}

// UnsupportedContentType returns a new error explained as follows
/* 不支持的Http content type */
func UnsupportedContentType() *unsupportedContentType {
	return &unsupportedContentType{
		ErrorBase: common.ErrorBase{
			HTTPCode: 415,
			Code:     "UnsupportedContentType",
			Message:  "The specified HTTP content type is not supported",
		},
	}
}

func (e *unsupportedContentType) AppendSubCode(code string) *unsupportedContentType {
	e.Code = e.Code + "." + code
	return e
}

func (e *unsupportedContentType) SetMessage(message string) *unsupportedContentType {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *unsupportedContentType) SetData(data map[string]string) *unsupportedContentType {
	e.ErrorBase.Data = data
	return e
}
