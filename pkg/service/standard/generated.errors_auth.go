// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"fmt"

	"github.com/lichuan0620/secret-keeper-backend/pkg/service/standard/common"
)

type invalidAuthorization struct {
	common.ErrorBase
}

// InvalidAuthorization returns a new error explained as follows
/* 鉴权失败，用户的认证信息错误 */
func InvalidAuthorization() *invalidAuthorization {
	return &invalidAuthorization{
		ErrorBase: common.ErrorBase{
			HTTPCode: 401,
			Code:     "InvalidAuthorization",
			Message:  "Invalid authentication credentials for the requested resource.",
		},
	}
}

func (e *invalidAuthorization) AppendSubCode(code string) *invalidAuthorization {
	e.Code = e.Code + "." + code
	return e
}

func (e *invalidAuthorization) SetMessage(message string) *invalidAuthorization {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *invalidAuthorization) SetData(data map[string]string) *invalidAuthorization {
	e.ErrorBase.Data = data
	return e
}

type forbiddenOperation struct {
	common.ErrorBase
}

// ForbiddenOperation returns a new error explained as follows
/* 无权限操作，账号被封禁或者账号被限制访问资源 */
func ForbiddenOperation(Action string) *forbiddenOperation {
	return &forbiddenOperation{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "ForbiddenOperation",
			Message:  fmt.Sprintf("You have no permission to perform operation: %s", Action),
			DataPreset: map[string]string{
				"Action": Action,
			},
		},
	}
}

func (e *forbiddenOperation) SetStandardMessageArgs(Action string) *forbiddenOperation {
	e.ErrorBase.Message = fmt.Sprintf("You have no permission to perform operation: %s", Action)
	e.ErrorBase.DataPreset = map[string]string{
		"Action": Action,
	}
	return e
}

func (e *forbiddenOperation) AppendSubCode(code string) *forbiddenOperation {
	e.Code = e.Code + "." + code
	return e
}

func (e *forbiddenOperation) SetMessage(message string) *forbiddenOperation {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *forbiddenOperation) SetData(data map[string]string) *forbiddenOperation {
	e.ErrorBase.Data = data
	return e
}

type productUnsubscribed struct {
	common.ErrorBase
}

// ProductUnsubscribed returns a new error explained as follows
/* 产品未开通，请前往控制台开通后重试 */
func ProductUnsubscribed() *productUnsubscribed {
	return &productUnsubscribed{
		ErrorBase: common.ErrorBase{
			HTTPCode: 403,
			Code:     "ProductUnsubscribed",
			Message:  "No access to the product, please go to the console to activate and try again",
		},
	}
}

func (e *productUnsubscribed) AppendSubCode(code string) *productUnsubscribed {
	e.Code = e.Code + "." + code
	return e
}

func (e *productUnsubscribed) SetMessage(message string) *productUnsubscribed {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *productUnsubscribed) SetData(data map[string]string) *productUnsubscribed {
	e.ErrorBase.Data = data
	return e
}

type dryRunOperation struct {
	common.ErrorBase
}

// DryRunOperation returns a new error explained as follows
/* DryRun 请求验证通过。本次操作为预校验操作，并未真正生效。
#
- DryRun 未通过，则返回对应错误；
- DryRun 通过，并不会实际生效，所以是 400 不是 200，放在 Errorcode 这部分，返回固定错误码 DryRunOperation（业界基本也如此） */
func DryRunOperation() *dryRunOperation {
	return &dryRunOperation{
		ErrorBase: common.ErrorBase{
			HTTPCode: 400,
			Code:     "DryRunOperation",
			Message:  "Request validation has been passed with DryRun flag set.",
		},
	}
}

func (e *dryRunOperation) AppendSubCode(code string) *dryRunOperation {
	e.Code = e.Code + "." + code
	return e
}

func (e *dryRunOperation) SetMessage(message string) *dryRunOperation {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *dryRunOperation) SetData(data map[string]string) *dryRunOperation {
	e.ErrorBase.Data = data
	return e
}
