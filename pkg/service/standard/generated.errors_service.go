// Code generated by errors generator. DO NOT EDIT.
//go:generate go run generator/main.go

package standard

import (
	"fmt"

	"github.com/lichuan0620/secret-keeper-backend/pkg/service/standard/common"
)

type internalServiceError struct {
	common.ErrorBase
}

// InternalServiceError returns a new error explained as follows
/* 系统开发兜底的错误提示 */
func InternalServiceError() *internalServiceError {
	return &internalServiceError{
		ErrorBase: common.ErrorBase{
			HTTPCode: 500,
			Code:     "InternalServiceError",
			Message:  "Service has some internal Error. Pls Contact With Admin.",
		},
	}
}

func (e *internalServiceError) AppendSubCode(code string) *internalServiceError {
	e.Code = e.Code + "." + code
	return e
}

func (e *internalServiceError) SetMessage(message string) *internalServiceError {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *internalServiceError) SetData(data map[string]string) *internalServiceError {
	e.ErrorBase.Data = data
	return e
}

type invalidChargeType struct {
	common.ErrorBase
}

// InvalidChargeType returns a new error explained as follows
/* 不支持该计费类型，请重新选择计费方式。 */
func InvalidChargeType() *invalidChargeType {
	return &invalidChargeType{
		ErrorBase: common.ErrorBase{
			HTTPCode: 400,
			Code:     "InvalidChargeType",
			Message:  "ChargeType is not valid.",
		},
	}
}

func (e *invalidChargeType) AppendSubCode(code string) *invalidChargeType {
	e.Code = e.Code + "." + code
	return e
}

func (e *invalidChargeType) SetMessage(message string) *invalidChargeType {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *invalidChargeType) SetData(data map[string]string) *invalidChargeType {
	e.ErrorBase.Data = data
	return e
}

type resourceNotFound struct {
	common.ErrorBase
}

// ResourceNotFound returns a new error explained as follows
/* 指定的资源找不到 */
func ResourceNotFound(ResourceName string) *resourceNotFound {
	return &resourceNotFound{
		ErrorBase: common.ErrorBase{
			HTTPCode: 404,
			Code:     "ResourceNotFound",
			Message:  fmt.Sprintf("The specified resource %s cannot be found.", ResourceName),
			DataPreset: map[string]string{
				"ResourceName": ResourceName,
			},
		},
	}
}

func (e *resourceNotFound) SetStandardMessageArgs(ResourceName string) *resourceNotFound {
	e.ErrorBase.Message = fmt.Sprintf("The specified resource %s cannot be found.", ResourceName)
	e.ErrorBase.DataPreset = map[string]string{
		"ResourceName": ResourceName,
	}
	return e
}

func (e *resourceNotFound) AppendSubCode(code string) *resourceNotFound {
	e.Code = e.Code + "." + code
	return e
}

func (e *resourceNotFound) SetMessage(message string) *resourceNotFound {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *resourceNotFound) SetData(data map[string]string) *resourceNotFound {
	e.ErrorBase.Data = data
	return e
}

type duplicatedResource struct {
	common.ErrorBase
}

// DuplicatedResource returns a new error explained as follows
/* 指定的资源已经存在 */
func DuplicatedResource(ResourceName string) *duplicatedResource {
	return &duplicatedResource{
		ErrorBase: common.ErrorBase{
			HTTPCode: 409,
			Code:     "DuplicatedResource",
			Message:  fmt.Sprintf("Resource %s already exists.", ResourceName),
			DataPreset: map[string]string{
				"ResourceName": ResourceName,
			},
		},
	}
}

func (e *duplicatedResource) SetStandardMessageArgs(ResourceName string) *duplicatedResource {
	e.ErrorBase.Message = fmt.Sprintf("Resource %s already exists.", ResourceName)
	e.ErrorBase.DataPreset = map[string]string{
		"ResourceName": ResourceName,
	}
	return e
}

func (e *duplicatedResource) AppendSubCode(code string) *duplicatedResource {
	e.Code = e.Code + "." + code
	return e
}

func (e *duplicatedResource) SetMessage(message string) *duplicatedResource {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *duplicatedResource) SetData(data map[string]string) *duplicatedResource {
	e.ErrorBase.Data = data
	return e
}

type serviceFlowLimitExceeded struct {
	common.ErrorBase
}

// ServiceFlowLimitExceeded returns a new error explained as follows
/* 请求过于频繁，超出了服务本身的基本限速 */
func ServiceFlowLimitExceeded() *serviceFlowLimitExceeded {
	return &serviceFlowLimitExceeded{
		ErrorBase: common.ErrorBase{
			HTTPCode: 429,
			Code:     "ServiceFlowLimitExceeded",
			Message:  "Request was rejected because the request speed of this openAPI is beyond the current flow control limit.",
		},
	}
}

func (e *serviceFlowLimitExceeded) AppendSubCode(code string) *serviceFlowLimitExceeded {
	e.Code = e.Code + "." + code
	return e
}

func (e *serviceFlowLimitExceeded) SetMessage(message string) *serviceFlowLimitExceeded {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *serviceFlowLimitExceeded) SetData(data map[string]string) *serviceFlowLimitExceeded {
	e.ErrorBase.Data = data
	return e
}

type internalServiceTimeout struct {
	common.ErrorBase
}

// InternalServiceTimeout returns a new error explained as follows
/* 内部服务执行超时 */
func InternalServiceTimeout() *internalServiceTimeout {
	return &internalServiceTimeout{
		ErrorBase: common.ErrorBase{
			HTTPCode: 504,
			Code:     "InternalServiceTimeout",
			Message:  "Internal Service is timeout. Pls Contact With Admin.",
		},
	}
}

func (e *internalServiceTimeout) AppendSubCode(code string) *internalServiceTimeout {
	e.Code = e.Code + "." + code
	return e
}

func (e *internalServiceTimeout) SetMessage(message string) *internalServiceTimeout {
	e.ErrorBase.Message = message
	e.ErrorBase.DataPreset = nil
	return e
}

func (e *internalServiceTimeout) SetData(data map[string]string) *internalServiceTimeout {
	e.ErrorBase.Data = data
	return e
}
